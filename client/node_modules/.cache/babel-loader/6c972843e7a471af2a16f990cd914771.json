{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\warre\\\\WebstormProjects\\\\nomahax_2019\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\warre\\\\WebstormProjects\\\\nomahax_2019\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\warre\\\\WebstormProjects\\\\nomahax_2019\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\warre\\\\WebstormProjects\\\\nomahax_2019\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\warre\\\\WebstormProjects\\\\nomahax_2019\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\warre\\\\WebstormProjects\\\\nomahax_2019\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\warre\\\\WebstormProjects\\\\nomahax_2019\\\\client\\\\src\\\\map\\\\index.js\";\nimport React, { Component } from \"react\";\nimport { ComposableMap, ZoomableGroup, Geographies, Geography, Markers, Marker, Annotations, Annotation } from \"react-simple-maps\";\nimport { scaleLinear } from \"d3-scale\";\nimport request from \"axios\";\nvar wrapperStyles = {\n  width: \"100%\",\n  maxWitdth: 980,\n  margin: \"0 auto\"\n};\nvar countryScale = scaleLinear().domain([0, 37843000]).range([1, 25]);\n\nvar BasicMap =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(BasicMap, _Component);\n\n  function BasicMap() {\n    var _this;\n\n    _classCallCheck(this, BasicMap);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BasicMap).call(this));\n    _this.state = {\n      energy: [],\n      coords: []\n    };\n    _this.fetchEnergy = _this.fetchEnergy.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.fetchCoords = _this.fetchCoords.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(BasicMap, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchEnergy();\n      this.fetchCoords();\n    }\n  }, {\n    key: \"fetchEnergy\",\n    value: function fetchEnergy() {\n      var _this2 = this;\n\n      request.get(\"https://raw.githubusercontent.com/beolgo/nomahax_2019/warreng/client/src/map/countries.json\").then(function (res) {\n        _this2.setState({\n          energy: res.data\n        });\n      });\n    }\n  }, {\n    key: \"fetchCoords\",\n    value: function fetchCoords() {\n      var _this3 = this;\n\n      request.get(\"https://raw.githubusercontent.com/beolgo/nomahax_2019/warreng/client/src/map/coords.json\").then(function (res) {\n        _this3.setState({\n          coords: res.data\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        style: wrapperStyles,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(ComposableMap, {\n        projectionConfig: {\n          scale: 205,\n          rotation: [-11, 0, 0]\n        },\n        width: 980,\n        height: 551,\n        style: {\n          width: \"100%\",\n          height: \"auto\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(ZoomableGroup, {\n        center: [0, 20],\n        disablePanning: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(Geographies, {\n        geography: \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-50m.json\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, function (geographies, projection) {\n        return geographies.map(function (geography, i) {\n          return geography.id !== \"ATA\" && React.createElement(Geography, {\n            key: i,\n            geography: geography,\n            projection: projection,\n            style: {\n              default: {\n                fill: \"#ECEFF1\",\n                stroke: \"#607D8B\",\n                strokeWidth: 0.75,\n                outline: \"none\"\n              },\n              hover: {\n                fill: \"#607D8B\",\n                stroke: \"#607D8B\",\n                strokeWidth: 0.75,\n                outline: \"none\"\n              },\n              pressed: {\n                fill: \"#FF5722\",\n                stroke: \"#607D8B\",\n                strokeWidth: 0.75,\n                outline: \"none\"\n              }\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 77\n            },\n            __self: this\n          });\n        });\n      }), React.createElement(Markers, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, this.state.energy.map(function (country, i) {\n        return React.createElement(Marker, {\n          key: i,\n          marker: country,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        });\n      })), React.createElement(Annotations, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, this.state.coords.map(function (country, i) {\n        return React.createElement(Annotation, {\n          key: i,\n          dx: 10,\n          dy: -10,\n          subject: country.coordinates,\n          strokeWidth: 1,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        }, React.createElement(\"text\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        }, country.Country));\n      })))));\n    }\n  }]);\n\n  return BasicMap;\n}(Component);\n\nexport default BasicMap;","map":{"version":3,"sources":["C:\\Users\\warre\\WebstormProjects\\nomahax_2019\\client\\src\\map\\index.js"],"names":["React","Component","ComposableMap","ZoomableGroup","Geographies","Geography","Markers","Marker","Annotations","Annotation","scaleLinear","request","wrapperStyles","width","maxWitdth","margin","countryScale","domain","range","BasicMap","state","energy","coords","fetchEnergy","bind","fetchCoords","get","then","res","setState","data","scale","rotation","height","geographies","projection","map","geography","i","id","default","fill","stroke","strokeWidth","outline","hover","pressed","country","coordinates","Country"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\r\nimport {\r\n    ComposableMap,\r\n    ZoomableGroup,\r\n    Geographies,\r\n    Geography,\r\n    Markers,\r\n    Marker,\r\n    Annotations,\r\n    Annotation,\r\n} from \"react-simple-maps\"\r\nimport { scaleLinear } from \"d3-scale\"\r\nimport request from \"axios\"\r\n\r\nconst wrapperStyles = {\r\n    width: \"100%\",\r\n    maxWitdth: 980,\r\n    margin: \"0 auto\",\r\n};\r\n\r\nconst countryScale = scaleLinear()\r\n    .domain([0, 37843000])\r\n    .range([1,25]);\r\n\r\nclass BasicMap extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            energy: [],\r\n            coords: [],\r\n\r\n        };\r\n        this.fetchEnergy = this.fetchEnergy.bind(this);\r\n        this.fetchCoords = this.fetchCoords.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        this.fetchEnergy();\r\n        this.fetchCoords();\r\n    }\r\n    fetchEnergy() {\r\n        request\r\n            .get(\"https://raw.githubusercontent.com/beolgo/nomahax_2019/warreng/client/src/map/countries.json\")\r\n            .then(res => {\r\n                this.setState({\r\n                    energy:res.data,\r\n                })\r\n            })\r\n    }\r\n    fetchCoords() {\r\n        request\r\n            .get(\"https://raw.githubusercontent.com/beolgo/nomahax_2019/warreng/client/src/map/coords.json\")\r\n            .then(res => {\r\n                this.setState({\r\n                    coords:res.data,\r\n                })\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={wrapperStyles}>\r\n                <ComposableMap\r\n                    projectionConfig={{\r\n                        scale: 205,\r\n                        rotation: [-11,0,0],\r\n                    }}\r\n                    width={980}\r\n                    height={551}\r\n                    style={{\r\n                        width: \"100%\",\r\n                        height: \"auto\",\r\n                    }}\r\n                    >\r\n                    <ZoomableGroup center={[0,20]} disablePanning>\r\n                        <Geographies geography=\"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-50m.json\">\r\n                            {(geographies, projection) => geographies.map((geography, i) => geography.id !== \"ATA\" && (\r\n                                <Geography\r\n                                    key={i}\r\n                                    geography={geography}\r\n                                    projection={projection}\r\n                                    style={{\r\n                                        default: {\r\n                                            fill: \"#ECEFF1\",\r\n                                            stroke: \"#607D8B\",\r\n                                            strokeWidth: 0.75,\r\n                                            outline: \"none\",\r\n                                        },\r\n                                        hover: {\r\n                                            fill: \"#607D8B\",\r\n                                            stroke: \"#607D8B\",\r\n                                            strokeWidth: 0.75,\r\n                                            outline: \"none\",\r\n                                        },\r\n                                        pressed: {\r\n                                            fill: \"#FF5722\",\r\n                                            stroke: \"#607D8B\",\r\n                                            strokeWidth: 0.75,\r\n                                            outline: \"none\",\r\n                                        },\r\n                                    }}\r\n                                />\r\n                            ))}\r\n                        </Geographies>\r\n                        <Markers>\r\n                            {\r\n                                this.state.energy.map((country, i) => (\r\n                                    <Marker key={i}\r\n                                            marker={country}\r\n                                    >\r\n                                        {/*console.log({country.name});*/}\r\n                                        {/*<circle*/}\r\n                                        {/*    cx={0}*/}\r\n                                        {/*    cy={0}*/}\r\n                                        {/*    r={countryScale(country.a2008)}*/}\r\n                                        {/*    fill=\"rgba(255,87,34,0.8)\"*/}\r\n                                        {/*    stroke=\"#607D8B\"*/}\r\n                                        {/*    strokeWidth=\"2\"*/}\r\n                                        {/*/>*/}\r\n                                    </Marker>\r\n                                ))\r\n                            }\r\n                        </Markers>\r\n                        <Annotations>\r\n                            {\r\n                                this.state.coords.map((country, i) => (\r\n                                    <Annotation\r\n                                        key={i}\r\n                                        dx={ 10 }\r\n                                        dy={ -10 }\r\n                                        subject={ country.coordinates }\r\n                                        strokeWidth={ 1 }\r\n                                    >\r\n                                        <text>\r\n                                            { country.Country }\r\n                                        </text>\r\n                                    </Annotation>\r\n                                ))\r\n                            }\r\n                        </Annotations>\r\n                    </ZoomableGroup>\r\n                </ComposableMap>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BasicMap"]},"metadata":{},"sourceType":"module"}