{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\warre\\\\WebstormProjects\\\\nomahax_2019\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\warre\\\\WebstormProjects\\\\nomahax_2019\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\warre\\\\WebstormProjects\\\\nomahax_2019\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\warre\\\\WebstormProjects\\\\nomahax_2019\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\warre\\\\WebstormProjects\\\\nomahax_2019\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\warre\\\\WebstormProjects\\\\nomahax_2019\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\warre\\\\WebstormProjects\\\\nomahax_2019\\\\client\\\\src\\\\map\\\\index.js\";\nimport React, { Component } from \"react\";\nimport { ComposableMap, ZoomableGroup, Geographies, Geography, Markers, Marker, Annotations, Annotation } from \"react-simple-maps\";\nimport { scaleLinear } from \"d3-scale\";\nimport request from \"axios\";\nimport Slider from \"react-input-slider\";\nimport { Motion, spring } from \"react-motion\";\nvar wrapperStyles = {\n  width: \"100%\",\n  maxWitdth: 980,\n  margin: \"0 auto\"\n};\nvar countryScale = scaleLinear().domain([0, 90.0]).range([4, 100]);\n\nvar BasicMap =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(BasicMap, _Component);\n\n  function BasicMap() {\n    var _this;\n\n    _classCallCheck(this, BasicMap);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BasicMap).call(this));\n    _this.state = {\n      energy: [],\n      coords: [],\n      center: [0, 20],\n      year: 1980,\n      zoom: 1,\n      activeCountry: -1\n    };\n    _this.fetchEnergy = _this.fetchEnergy.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.fetchCoords = _this.fetchCoords.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleHover = _this.handleHover.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleZoomIn = _this.handleZoomIn.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleZoomOut = _this.handleZoomOut.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleCityClick = _this.handleCityClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleReset = _this.handleReset.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(BasicMap, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchEnergy();\n      this.fetchCoords();\n      this.handleHover();\n    }\n  }, {\n    key: \"fetchEnergy\",\n    value: function fetchEnergy() {\n      var _this2 = this;\n\n      request.get(\"https://raw.githubusercontent.com/beolgo/nomahax_2019/warreng/client/src/map/countries.json\").then(function (res) {\n        _this2.setState({\n          energy: res.data\n        });\n      });\n    }\n  }, {\n    key: \"fetchCoords\",\n    value: function fetchCoords() {\n      var _this3 = this;\n\n      request.get(\"https://raw.githubusercontent.com/beolgo/nomahax_2019/warreng/client/src/map/coords.json\").then(function (res) {\n        _this3.setState({\n          coords: res.data\n        });\n      });\n    }\n  }, {\n    key: \"handleHover\",\n    value: function handleHover(marker, event) {// console.log(\"Marker data: \", marker);\n      // this.setState({\n      //     activeCountry: marker.Country\n      // });\n      //\n      // console.log(\"Active country code: \", this.state.activeCountry)\n    }\n  }, {\n    key: \"handleZoomIn\",\n    value: function handleZoomIn() {\n      this.setState({\n        zoom: this.state.zoom * 2\n      });\n    }\n  }, {\n    key: \"handleZoomOut\",\n    value: function handleZoomOut() {\n      this.setState({\n        zoom: this.state.zoom / 2\n      });\n    }\n  }, {\n    key: \"handleCityClick\",\n    value: function handleCityClick(city) {\n      this.setState({\n        zoom: 2,\n        center: city.coordinates\n      });\n    }\n  }, {\n    key: \"handleReset\",\n    value: function handleReset() {\n      this.setState({\n        center: [0, 20],\n        zoom: 1\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      if (this.state.coords.length && this.state.energy.length) {\n        var coords = this.state.coords;\n        this.state.energy.forEach(function (value, index) {\n          coords[index].value = value[\"a\" + _this4.state.year];\n        }); // console.log(coords);\n\n        return React.createElement(\"div\", {\n          style: wrapperStyles,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }, React.createElement(ComposableMap, {\n          projectionConfig: {\n            scale: 205,\n            rotation: [-11, 0, 0]\n          },\n          width: 980,\n          height: 551,\n          style: {\n            width: \"100%\",\n            height: \"auto\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }, React.createElement(ZoomableGroup, {\n          center: [0, 20],\n          disablePanning: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        }, React.createElement(Geographies, {\n          geography: \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-50m.json\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125\n          },\n          __self: this\n        }, function (geographies, projection) {\n          return geographies.map(function (geography, i) {\n            return geography.id !== \"ATA\" && React.createElement(Geography, {\n              key: i,\n              geography: geography,\n              projection: projection,\n              style: {\n                default: {\n                  fill: \"#3E8745\",\n                  stroke: \"#607D8B\",\n                  strokeWidth: 0.75,\n                  outline: \"none\"\n                },\n                hover: {\n                  fill: \"#85c87c\",\n                  stroke: \"#607D8B\",\n                  strokeWidth: 0.75,\n                  outline: \"none\"\n                } // pressed: {\n                //     fill: \"#FF5722\",\n                //     stroke: \"#607D8B\",\n                //     strokeWidth: 0.75,\n                //     outline: \"none\",\n                // },\n\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 127\n              },\n              __self: this\n            });\n          });\n        }), React.createElement(Markers, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154\n          },\n          __self: this\n        }, coords.map(function (country, i) {\n          return React.createElement(Marker, {\n            key: i,\n            marker: country,\n            onMouseEnter: _this4.handleHover,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 157\n            },\n            __self: this\n          }, React.createElement(\"circle\", {\n            cx: 0,\n            cy: 0,\n            r: countryScale(country.value),\n            fill: \"rgba(255,251,0,0.5)\",\n            stroke: \"#607D8B\",\n            strokeWidth: \"2\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 161\n            },\n            __self: this\n          }));\n        })), React.createElement(Annotations, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 173\n          },\n          __self: this\n        }, this.state.coords.map(function (country, i) {\n          return React.createElement(Annotation, {\n            key: i,\n            dx: 0,\n            dy: 0,\n            subject: country.coordinates,\n            strokeWidth: 1,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 178\n            },\n            __self: this\n          }, React.createElement(\"text\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 186\n            },\n            __self: this\n          }));\n        })))), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 197\n          },\n          __self: this\n        }, React.createElement(Slider, {\n          styles: {},\n          axis: \"x\",\n          xmin: 1980,\n          xmax: 2008,\n          x: this.state.year,\n          onChange: function onChange(_ref) {\n            var x = _ref.x;\n            return _this4.setState({\n              year: x\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 198\n          },\n          __self: this\n        }), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 208\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          class: \"year_text\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 209\n          },\n          __self: this\n        }, \"Current year: \", this.state.year)));\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, \"Loading...\");\n    }\n  }]);\n\n  return BasicMap;\n}(Component);\n\nexport default BasicMap;","map":{"version":3,"sources":["C:\\Users\\warre\\WebstormProjects\\nomahax_2019\\client\\src\\map\\index.js"],"names":["React","Component","ComposableMap","ZoomableGroup","Geographies","Geography","Markers","Marker","Annotations","Annotation","scaleLinear","request","Slider","Motion","spring","wrapperStyles","width","maxWitdth","margin","countryScale","domain","range","BasicMap","state","energy","coords","center","year","zoom","activeCountry","fetchEnergy","bind","fetchCoords","handleHover","handleZoomIn","handleZoomOut","handleCityClick","handleReset","get","then","res","setState","data","marker","event","city","coordinates","length","forEach","value","index","scale","rotation","height","geographies","projection","map","geography","i","id","default","fill","stroke","strokeWidth","outline","hover","country","x"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\r\nimport {\r\n    ComposableMap,\r\n    ZoomableGroup,\r\n    Geographies,\r\n    Geography,\r\n    Markers,\r\n    Marker,\r\n    Annotations,\r\n    Annotation,\r\n} from \"react-simple-maps\"\r\nimport { scaleLinear } from \"d3-scale\"\r\nimport request from \"axios\"\r\nimport Slider from \"react-input-slider\"\r\nimport { Motion, spring } from \"react-motion\"\r\n\r\nconst wrapperStyles = {\r\n    width: \"100%\",\r\n    maxWitdth: 980,\r\n    margin: \"0 auto\",\r\n};\r\n\r\nconst countryScale = scaleLinear()\r\n    .domain([0, 90.0])\r\n    .range([4,100]);\r\n\r\nclass BasicMap extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            energy: [],\r\n            coords: [],\r\n            center: [0,20],\r\n            year: 1980,\r\n            zoom: 1,\r\n            activeCountry: -1\r\n        };\r\n        this.fetchEnergy = this.fetchEnergy.bind(this);\r\n        this.fetchCoords = this.fetchCoords.bind(this);\r\n        this.handleHover = this.handleHover.bind(this);\r\n        this.handleZoomIn = this.handleZoomIn.bind(this)\r\n        this.handleZoomOut = this.handleZoomOut.bind(this)\r\n        this.handleCityClick = this.handleCityClick.bind(this)\r\n        this.handleReset = this.handleReset.bind(this)\r\n    }\r\n    componentDidMount() {\r\n        this.fetchEnergy();\r\n        this.fetchCoords();\r\n        this.handleHover();\r\n    }\r\n    fetchEnergy() {\r\n        request\r\n            .get(\"https://raw.githubusercontent.com/beolgo/nomahax_2019/warreng/client/src/map/countries.json\")\r\n            .then(res => {\r\n                this.setState({\r\n                    energy: res.data\r\n                })\r\n            })\r\n    }\r\n    fetchCoords() {\r\n        request\r\n            .get(\"https://raw.githubusercontent.com/beolgo/nomahax_2019/warreng/client/src/map/coords.json\")\r\n            .then((res) => {\r\n                this.setState({\r\n                    coords:res.data,\r\n                })\r\n            })\r\n    }\r\n    handleHover(marker, event){\r\n        // console.log(\"Marker data: \", marker);\r\n        // this.setState({\r\n        //     activeCountry: marker.Country\r\n        // });\r\n        //\r\n        // console.log(\"Active country code: \", this.state.activeCountry)\r\n    }\r\n    handleZoomIn() {\r\n        this.setState({\r\n            zoom: this.state.zoom * 2,\r\n        })\r\n    }\r\n    handleZoomOut() {\r\n        this.setState({\r\n            zoom: this.state.zoom / 2,\r\n        })\r\n    }\r\n    handleCityClick(city) {\r\n        this.setState({\r\n            zoom: 2,\r\n            center: city.coordinates,\r\n        })\r\n    }\r\n    handleReset() {\r\n        this.setState({\r\n            center: [0,20],\r\n            zoom: 1,\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        if(this.state.coords.length && this.state.energy.length){\r\n\r\n            const coords = this.state.coords;\r\n            this.state.energy.forEach((value, index) => {\r\n                coords[index].value = value[\"a\" + this.state.year];\r\n            });\r\n            // console.log(coords);\r\n\r\n            return (\r\n                <div style={wrapperStyles}>\r\n                    <ComposableMap\r\n                        projectionConfig={{\r\n                            scale: 205,\r\n                            rotation: [-11,0,0],\r\n                        }}\r\n                        width={980}\r\n                        height={551}\r\n                        style={{\r\n                            width: \"100%\",\r\n                            height: \"auto\",\r\n                        }}\r\n                    >\r\n                        <ZoomableGroup center={[0,20]} disablePanning>\r\n                            <Geographies geography=\"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-50m.json\">\r\n                                {(geographies, projection) => geographies.map((geography, i) => geography.id !== \"ATA\" && (\r\n                                    <Geography\r\n                                        key={i}\r\n                                        geography={geography}\r\n                                        projection={projection}\r\n                                        style={{\r\n                                            default: {\r\n                                                fill: \"#3E8745\",\r\n                                                stroke: \"#607D8B\",\r\n                                                strokeWidth: 0.75,\r\n                                                outline: \"none\",\r\n                                            },\r\n                                            hover: {\r\n                                                fill: \"#85c87c\",\r\n                                                stroke: \"#607D8B\",\r\n                                                strokeWidth: 0.75,\r\n                                                outline: \"none\",\r\n                                            },\r\n                                            // pressed: {\r\n                                            //     fill: \"#FF5722\",\r\n                                            //     stroke: \"#607D8B\",\r\n                                            //     strokeWidth: 0.75,\r\n                                            //     outline: \"none\",\r\n                                            // },\r\n                                        }}\r\n                                    />\r\n                                ))}\r\n                            </Geographies>\r\n                            <Markers>\r\n                                {\r\n                                    coords.map((country, i) => (\r\n                                        <Marker key={i}\r\n                                                marker={country}\r\n                                                onMouseEnter={ this.handleHover }\r\n                                        >\r\n                                            <circle\r\n                                                cx={0}\r\n                                                cy={0}\r\n                                                r={countryScale(country.value)}\r\n                                                fill=\"rgba(255,251,0,0.5)\"\r\n                                                stroke=\"#607D8B\"\r\n                                                strokeWidth=\"2\"\r\n                                            />\r\n                                        </Marker>\r\n                                    ))\r\n                                }\r\n                            </Markers>\r\n                            <Annotations>\r\n                                {\r\n\r\n                                    this.state.coords.map((country, i) => (\r\n\r\n                                        <Annotation\r\n                                            key={i}\r\n                                            dx={ 0 }\r\n                                            dy={ 0 }\r\n                                            subject={ country.coordinates }\r\n                                            strokeWidth={ 1 }\r\n                                        >\r\n\r\n                                            <text>\r\n                                                {/*{coords[this.state.activeCountry].value}*/}\r\n                                            </text>\r\n\r\n                                        </Annotation>\r\n\r\n                                    ))\r\n                                }\r\n                            </Annotations>\r\n                        </ZoomableGroup>\r\n                    </ComposableMap>\r\n                    <div>\r\n                        <Slider\r\n                            styles={{\r\n\r\n                            }}\r\n                            axis=\"x\"\r\n                            xmin={1980}\r\n                            xmax={2008}\r\n                            x={this.state.year}\r\n                            onChange={({ x }) => this.setState({year: x})}\r\n                        />\r\n                        <br/>\r\n                        <div class=\"year_text\">\r\n                        Current year: {this.state.year}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            )\r\n        }\r\n\r\n        return <div>Loading...</div>\r\n\r\n    }\r\n}\r\n\r\nexport default BasicMap"]},"metadata":{},"sourceType":"module"}